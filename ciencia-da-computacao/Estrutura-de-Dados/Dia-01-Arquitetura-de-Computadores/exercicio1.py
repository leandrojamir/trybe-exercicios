# Exerc√≠cio 1:
#  Crie um projeto que simular√° a arquitetura que vimos em aula. Ele dever√° ter
# um arquivo principal para a execu√ß√£o do programa que representar√° nosso
# Sistema Operacional e duas classes, que representar√£o a Mem√≥ria Principal e
# a Secund√°ria.

#  Cada tipo de mem√≥ria vai armazenar os dados na mem√≥ria que ela representa,
# sendo a Principal aquela que armazena tudo em mem√≥ria RAM e a secund√°ria no
# disco. Atrav√©s do Python estaremos fazendo chamadas ao Sistema Operacional
# para realizar essas tarefas para n√≥s, pois ele melhor do que ningu√©m saber√°
# utilizar as mem√≥rias. O objetivo do nosso script ser√° realizar a soma de uma
# lista de n√∫meros aleat√≥rios utilizando as duas implementa√ß√µes de mem√≥ria.
# Os dados ser√£o sempre armazenados como strings!

# Vamos l√°:
# 1) Crie um novo diret√≥rio na sua m√°quina para os exerc√≠cios
# (pode chamar ele de computador ou pc üòé).
# Os pr√≥ximos arquivos dever√£o ser criados dentro dele.


# 2) Vamos come√ßar a nossa mem√≥ria principal, ou mem√≥ria RAM: para isso crie um
# arquivo main_memory.py e adicione o conte√∫do abaixo nela.
# Implemente os m√©todos get e load.
#  No load voc√™ adicionar√° (append) o elemento passado (value) √† lista
# loaded_memory.
#  No get voc√™ retornar√° o valor presente na posi√ß√£o dada (index) na lista
# loaded_memory. Se o valor n√£o existir ou n√£o for num√©rico, retorne 0.
# class MainMemory:
# def __init__(self):
#     self.clean()

# def load(self, value):
#     # Sua implementa√ß√£o

# def get(self, index):
#     # Sua implementa√ß√£o

# def clean(self):
#     self.loaded_memory = []


# 3) Crie um arquivo secondary_memory.py para ser a nossa mem√≥ria secund√°ria e
# adicione o conte√∫do abaixo. Mais uma vez, voc√™ ser√° respons√°vel pela
# implementa√ß√£o dos m√©todos get e load por√©m agora voc√™ dever√° utilizar a
# fun√ß√£o open, para persistir esses dados em disco.
#  No load, utilizando o m√©todo open, escreva um c√≥digo que crie um novo
# arquivo utilizando next_file_name como path e salve o value no conte√∫do
# deste novo arquivo.
#  No get, tamb√©m utilizando o m√©todo open, retorne o conte√∫do do arquivo
# file_name. N√£o esque√ßa de converter o valor para num√©rico (float ou int).
# from os import mkdir, listdir
# from os.path import join
# from shutil import rmtree

# DISK_PATH = "./disk"


# class SecondaryMemory:
# def __init__(self, disk_path=DISK_PATH):
#     self.disk_path = disk_path
#     try:
#         mkdir(self.disk_path)
#     except FileExistsError:
#         pass

# def load(self, value):
#     value = str(value)
#     next_index = str(len(listdir(self.disk_path)))
#     next_file_name = join(self.disk_path, next_index)
#     # Sua implementa√ß√£o

# def get(self, index):
#     index = str(index)
#     file_name = join(self.disk_path, index)
#     # Sua implementa√ß√£o

# def clean(self):
#     rmtree(self.disk_path)
#     mkdir(self.disk_path)


# 4) Vamos criar nosso arquivo principal para gerenciar as ‚Äúmem√≥rias‚Äù que
# criamos. Para isso, crie um novo arquivo operating_system.py e coloque o
# seguinte conte√∫do:
# from time import perf_counter

# from main_memory import MainMemory
# from secondary_memory import SecondaryMemory

# main = MainMemory()
# secondary = SecondaryMemory()

# # N√∫meros aleat√≥rios a serem somados
# RANDOM_NUMBERS = ["36912", "84300"] * 100

# def timer(string, initial_time):
#  """Fun√ß√£o auxiliar para print temporizado"""
#  print(string)
#  print(f"Tempo para a tarefa terminar: {perf_counter() - initial_time:6f}\n")


# # Desempenho da mem√≥ria prim√°ria
# main_load_init_time = perf_counter()
# for number in RANDOM_NUMBERS:
#     main.load(number)
# timer("N√∫meros carregados na mem√≥ria principal", main_load_init_time)

# main_get_init_time = perf_counter()
# main_sum = sum([main.get(i) for i in range(len(RANDOM_NUMBERS))])
# timer(f"Soma na mem√≥ria principal: {main_sum}", main_get_init_time)

# main_clean_init_time = perf_counter()
# main.clean()
# timer("Clean na mem√≥ria principal", main_clean_init_time)


# # Desempenho da mem√≥ria secund√°ria
# secondary_load_initial_time = perf_counter()
# for number in RANDOM_NUMBERS:
#     secondary.load(number)
# timer(
#   "N√∫meros carregados na mem√≥ria secund√°ria",
#   secondary_load_initial_time,
# )

# secondary_get_init_time = perf_counter()
# secondary_sum = sum([secondary.get(i) for i in range(len(RANDOM_NUMBERS))])
# timer(
#   f"Soma na mem√≥ria secund√°ria: {secondary_sum}",
#   secondary_get_init_time,
# )

# secondary_clean_init_time = perf_counter()
# secondary.clean()
# timer("Clean na mem√≥ria secund√°ria", secondary_clean_init_time)


# 5) Vamos testar nosso script! Execute o comando python operating_system.py e
# veja a sa√≠da no console. Deu certo?! Como foram os tempos de sa√≠da?!

# jamir@jamir-X550CA:~/trybe-exercicios/ciencia-da-computacao/
# Estrutura-de-Dados/Dia-01-Arquitetura-de-Computadores/
# pc$ python3 operating_system.py
# N√∫meros carregados na mem√≥ria principal
# Tempo para a tarefa terminar: 0.000171

# Soma na mem√≥ria principal: 12121200.0
# Tempo para a tarefa terminar: 0.000175

# Clean na mem√≥ria principal
# Tempo para a tarefa terminar: 0.000018

# N√∫meros carregados na mem√≥ria secund√°ria
# Tempo para a tarefa terminar: 0.055655

# Soma na mem√≥ria secund√°ria: 12121200.0
# Tempo para a tarefa terminar: 0.011503

# Clean na mem√≥ria secund√°ria
# Tempo para a tarefa terminar: 0.008270


# 6) Para deixar nosso script ainda mais legal, vamos aumentar a quantidade de
# n√∫meros para serem somados. Adicione uma grande quantidade de n√∫meros no
# array de n√∫meros aleat√≥rios. Para isso, basta adicionar * 200 ao final da
# linha que declara a lista RANDOM_NUMBERS, para multiplicar a quantidade de
# elementos na lista. Rode o script novamente. Como foi o tempo de resposta
# agora? Deu diferen√ßa, n√©? Qual foi mais r√°pido?!


# 7) Agora, vamos refor√ßar mais um conte√∫do aprendido:


# 8) Comente os trechos de c√≥digo que fazem a opera√ß√£o de limpeza (clean) da
# mem√≥ria.


# 9) Execute o comando novamente


# 10) Comente os trechos de c√≥digo que fazem a opera√ß√£o de carregamento (load)
# da mem√≥ria e execute novamente.


# 11) Compare os resultados das somas. O que aconteceu?
